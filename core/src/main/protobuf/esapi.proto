//  Copyright 2018 seekloud (https://github.com/seekloud)
//
//  Licensed under the Apache License, Version 2.0 (the "License");
//  you may not use this file except in compliance with the License.
//  You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
//  Unless required by applicable law or agreed to in writing, software
//  distributed under the License is distributed on an "AS IS" BASIS,
//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//  See the License for the specific language governing permissions and
//  limitations under the License.


syntax = "proto3";

import "protobuf/actions.proto";
import "protobuf/observations.proto";


package org.seekloud.esheepapi.pb;


message RequestMsg {

  string msg_id = 1;

  string player_id = 2;

  string api_token = 3;

  reserved 4 to 5;

  oneof request_body {

    ActionReq action = 6;
    ObservationReq observation = 7;
    InformReq inform = 8;


    CreateRoomReq create_room = 20;
    JoinRoomReq join_room = 21;
    LeaveRoomReq leave = 22;
    ActionSpaceReq action_space = 23;
  }
}


message ResponseMsg {

  int32 id = 1;
  int32 err_code = 2;
  State state = 3;

  reserved 4 to 5;


  oneof response_body {
    EmptyRsp empty_rsp = 6;
    ActionRsp action = 7;
    ObservationRsp observation = 8;
    InformRsp inform = 9;

    CreateRoomRsp create_room = 21;
  }
  string msg = 100;
}


enum State {
  init_game = 0;
  in_game = 1;
  killed = 2;

  in_replay = 3;
  ended = 4;
  unknown = 15;
}


message CreateRoomReq {
}


message CreateRoomRsp {
  string room_id = 1;
}


message JoinRoomReq {
  string room_id = 1;
}


message ActionReq {
  Move move = 1;
  Swing swing = 2;
  int32 fire = 3;
  int32 apply = 4;
}

message ActionRsp {
  int32 frame_index = 15;
}


message ObservationReq {
}


message ObservationRsp {
  LayeredObservation layered_observation = 1;
  ImgData human_observation = 2;
  int32 frame_index = 15;
}


message InformReq {
}

message InformRsp {
  int32 score = 1;
  int32 kills = 2;
  int32 heath = 3;
  int32 frame_index = 15;
}


message LeaveRoomReq {
}


message ActionSpaceReq {
}


message ActionSpaceRsp {
  repeated Move move = 1;
  bool swing = 2;
  repeated int32 fire = 3;
  repeated int32 apply = 4;
}

//response bodies.
//---------------------------------------------
message EmptyRsp {
}



